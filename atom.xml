<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shaw&#39;s blog.</title>
  
  <subtitle>Life is short, carpe diem.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-28T14:14:04.773Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Shaw</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解CSS布局之Flexbox</title>
    <link href="http://yoursite.com/2019/11/26/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3CSS%E5%B8%83%E5%B1%80%E4%B9%8BFlexbox/"/>
    <id>http://yoursite.com/2019/11/26/深入理解CSS布局之Flexbox/</id>
    <published>2019-11-26T13:18:00.000Z</published>
    <updated>2019-11-28T14:14:04.773Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h1&gt;&lt;p&gt;&lt;code&gt;Flexbox&lt;/code&gt;布局提供了一种高效的在容器中布局、对齐、分配空间的方式，即使其&lt;code&gt;item&lt;/code&gt;的大小是未知的或者动态的。&lt;/p&gt;
&lt;h1 id=&quot;二、属性&quot;&gt;&lt;a href=&quot;#二、属性&quot; class=&quot;headerlink&quot; title=&quot;二、属性&quot;&gt;&lt;/a&gt;二、属性&lt;/h1&gt;&lt;h3 id=&quot;flex-container相关&quot;&gt;&lt;a href=&quot;#flex-container相关&quot; class=&quot;headerlink&quot; title=&quot;flex container相关&quot;&gt;&lt;/a&gt;flex container相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;display&lt;/li&gt;
&lt;li&gt;flex-direction&lt;/li&gt;
&lt;li&gt;flex-wrap&lt;/li&gt;
&lt;li&gt;flex-flow&lt;/li&gt;
&lt;li&gt;justify-content&lt;/li&gt;
&lt;li&gt;align-items&lt;/li&gt;
&lt;li&gt;align-content&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;flex-items相关&quot;&gt;&lt;a href=&quot;#flex-items相关&quot; class=&quot;headerlink&quot; title=&quot;flex items相关&quot;&gt;&lt;/a&gt;flex items相关&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;order&lt;/li&gt;
&lt;li&gt;flex-grow&lt;/li&gt;
&lt;li&gt;flex-shrink&lt;/li&gt;
&lt;li&gt;flex-basis&lt;/li&gt;
&lt;li&gt;flex&lt;/li&gt;
&lt;li&gt;align-self&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS Flexbox" scheme="http://yoursite.com/tags/CSS-Flexbox/"/>
    
  </entry>
  
  <entry>
    <title>深入理解CSS布局之Grid</title>
    <link href="http://yoursite.com/2019/11/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3CSS%E5%B8%83%E5%B1%80%E4%B9%8BGrid/"/>
    <id>http://yoursite.com/2019/11/17/深入理解CSS布局之Grid/</id>
    <published>2019-11-17T14:15:00.000Z</published>
    <updated>2019-11-25T13:55:44.843Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、-前言&quot;&gt;&lt;a href=&quot;#一、-前言&quot; class=&quot;headerlink&quot; title=&quot;一、 前言&quot;&gt;&lt;/a&gt;一、 前言&lt;/h1&gt;&lt;p&gt;一直听说&lt;code&gt;CSS&lt;/code&gt;的&lt;code&gt;Grid&lt;/code&gt;布局是一项非常强大的布局技术，不像&lt;code&gt;Flex&lt;/code&gt;布局只是一维的系统，&lt;code&gt;Grid&lt;/code&gt;布局是个二维的系统，也就是说其可以同时处理行和列。&lt;code&gt;Grid&lt;/code&gt;布局分为两个部分，&lt;code&gt;Grid&lt;/code&gt;容器（Container）和&lt;code&gt;Grid&lt;/code&gt;项目（Items）。&lt;/p&gt;
&lt;h1 id=&quot;二、-一些重要概念及术语&quot;&gt;&lt;a href=&quot;#二、-一些重要概念及术语&quot; class=&quot;headerlink&quot; title=&quot;二、 一些重要概念及术语&quot;&gt;&lt;/a&gt;二、 一些重要概念及术语&lt;/h1&gt;&lt;h3 id=&quot;Grid-Container&quot;&gt;&lt;a href=&quot;#Grid-Container&quot; class=&quot;headerlink&quot; title=&quot;Grid Container&quot;&gt;&lt;/a&gt;Grid Container&lt;/h3&gt;&lt;p&gt;应用了&lt;code&gt;display: grid&lt;/code&gt;的元素，它是所有&lt;code&gt;grid items&lt;/code&gt;的直接父元素，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item item-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item item-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item item-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;Grid-Item&quot;&gt;&lt;a href=&quot;#Grid-Item&quot; class=&quot;headerlink&quot; title=&quot;Grid Item&quot;&gt;&lt;/a&gt;Grid Item&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Grid Container&lt;/code&gt;的直接后代元素，所有&lt;code&gt;div.item&lt;/code&gt;都是，但是&lt;code&gt;p.sun-item&lt;/code&gt;不是。&lt;/p&gt;
&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&amp;lt;p &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;sub-item&quot;&lt;/span&gt;&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;item&quot;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="CSS" scheme="http://yoursite.com/categories/CSS/"/>
    
    
      <category term="CSS Grid" scheme="http://yoursite.com/tags/CSS-Grid/"/>
    
  </entry>
  
  <entry>
    <title>JS之原生AJAX的请求过程具体实现</title>
    <link href="http://yoursite.com/2019/10/28/JS%E4%B9%8B%E5%8E%9F%E7%94%9FAJAX%E7%9A%84%E8%AF%B7%E6%B1%82%E8%BF%87%E7%A8%8B%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/10/28/JS之原生AJAX的请求过程具体实现/</id>
    <published>2019-10-28T14:48:00.000Z</published>
    <updated>2019-10-28T14:53:42.732Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、AJAX的请求大致过程&quot;&gt;&lt;a href=&quot;#一、AJAX的请求大致过程&quot; class=&quot;headerlink&quot; title=&quot;一、AJAX的请求大致过程&quot;&gt;&lt;/a&gt;一、AJAX的请求大致过程&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;创建一个异步调用&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象 &lt;/li&gt;
&lt;li&gt;打开一个新的&lt;code&gt;HTTP&lt;/code&gt;请求，并指定该&lt;code&gt;HTTP&lt;/code&gt;请求的方法、&lt;code&gt;URL&lt;/code&gt;及验证信息，设置响应&lt;code&gt;HTTP&lt;/code&gt;请求状态变化的函数&lt;/li&gt;
&lt;li&gt;发送&lt;code&gt;HTTP&lt;/code&gt;请求&lt;/li&gt;
&lt;li&gt;获取异步调用返回的数据&lt;/li&gt;
&lt;li&gt;使用JavaScript和DOM实现局部刷新&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;二、具体实现&quot;&gt;&lt;a href=&quot;#二、具体实现&quot; class=&quot;headerlink&quot; title=&quot;二、具体实现&quot;&gt;&lt;/a&gt;二、具体实现&lt;/h1&gt;&lt;p&gt;先创建一个兼容各个平台的&lt;code&gt;XMLHttpRequest&lt;/code&gt;对象 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function getXHR(){
  var xhr = null;
  if(window.XMLHttpRequest) {// 兼容 IE7+, Firefox, Chrome, Opera, Safari
    xhr = new XMLHttpRequest();
  } else if (window.ActiveXObject) {
    try {
      xhr = new ActiveXObject(&amp;quot;Msxml2.XMLHTTP&amp;quot;);// 即MSXML3
    } catch (e) {
      try {
        xhr = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);// // 兼容 IE6, IE5，API很老，不建议使用
      } catch (e) {
        alert(&amp;quot;您的浏览器不支持AJAX.&amp;quot;);
      }
    }
  }
  return xhr;
}&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript AJAX" scheme="http://yoursite.com/tags/JavaScript-AJAX/"/>
    
  </entry>
  
  <entry>
    <title>JS之typeof和instanceof方法具体实现</title>
    <link href="http://yoursite.com/2019/10/27/JS%E4%B9%8Btypeof%E5%92%8Cinstanceof%E6%96%B9%E6%B3%95%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/10/27/JS之typeof和instanceof方法具体实现/</id>
    <published>2019-10-27T15:10:00.000Z</published>
    <updated>2019-10-27T15:13:45.393Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、typeof方法的作用&quot;&gt;&lt;a href=&quot;#一、typeof方法的作用&quot; class=&quot;headerlink&quot; title=&quot;一、typeof方法的作用&quot;&gt;&lt;/a&gt;一、typeof方法的作用&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;判断变量类型&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;typeof 1 //&amp;quot;number&amp;quot;
typeof &amp;apos;1&amp;apos; //&amp;quot;string&amp;quot;
typeof {} //&amp;quot;object&amp;quot;
typeof true //&amp;quot;boolean&amp;quot;
typeof undefined // &amp;quot;undefined&amp;quot;
typeof null //&amp;quot;object&amp;quot; #bug
typeof Symbol //&amp;quot;function&amp;quot;
typeof Symbol(1) //&amp;quot;symbol&amp;quot;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript typeof instanceof" scheme="http://yoursite.com/tags/JavaScript-typeof-instanceof/"/>
    
  </entry>
  
  <entry>
    <title>前端框架路由实现的Hash和History两种模式的区别</title>
    <link href="http://yoursite.com/2019/10/18/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0%E7%9A%84Hash%E5%92%8CHistory%E4%B8%A4%E7%A7%8D%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2019/10/18/前端框架路由实现的Hash和History两种模式的区别/</id>
    <published>2019-10-18T14:32:00.000Z</published>
    <updated>2019-10-21T14:02:23.781Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-9e5d1063264044c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Hash vs History&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;之前面试的时候就有准备过前端框架中两种路由实现方式及区别，但是当时没专门下功夫去深入了解，就在网上搜了下别人总结的临时抱了下佛脚。但是事实证明，出来混，总是要还的，在后来的面试中又遇到了，而且这次问得更加深入，仅仅靠死记硬背来的知识总是遗忘得很快，网上别人总结的东西终归还是别人的，鉴于网上别人总结的内容有点杂乱无章，还是决定自己在此总结记录一番，以加深印象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;一、何为前端路由&quot;&gt;&lt;a href=&quot;#一、何为前端路由&quot; class=&quot;headerlink&quot; title=&quot;一、何为前端路由&quot;&gt;&lt;/a&gt;一、何为前端路由&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;路由的概念来自于服务器端，在SPA（单页应用）中，路由描述的是URL到函数的映射关系，即在浏览器中输入一个URL，相应的控制器会对提交的请求进行解析，然后进行路由匹配，找到对应的模块和函数进行执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;二、如何实现&quot;&gt;&lt;a href=&quot;#二、如何实现&quot; class=&quot;headerlink&quot; title=&quot;二、如何实现&quot;&gt;&lt;/a&gt;二、如何实现&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;实现的两个核心问题是如何检测路由变化和如何改变URL而不刷新页面，通常有两种实现模式，一种是Hash模式，一种是History模式。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript 前端 路由 Angular Vue" scheme="http://yoursite.com/tags/JavaScript-%E5%89%8D%E7%AB%AF-%E8%B7%AF%E7%94%B1-Angular-Vue/"/>
    
  </entry>
  
  <entry>
    <title>你不知道的JavaScript中卷-读书笔记</title>
    <link href="http://yoursite.com/2019/10/07/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS%E4%B8%AD%E5%8D%B7/"/>
    <id>http://yoursite.com/2019/10/07/你不知道的JS中卷/</id>
    <published>2019-10-07T13:47:00.000Z</published>
    <updated>2019-10-27T02:15:07.113Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-8c92a4538cc134eb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;JavaScript&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;基本类型值&quot;&gt;&lt;a href=&quot;#基本类型值&quot; class=&quot;headerlink&quot; title=&quot;基本类型值&quot;&gt;&lt;/a&gt;基本类型值&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有一个坑常常被提到，[] + {}，{} +[]，它们返回不同的结果，分别是”[object Object]”，0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if (a) { foo(); }可以写成a &amp;amp;&amp;amp; foo()a = b || “something” 和a &amp;amp;&amp;amp; b() 用到了“短路”机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;== 允许在相等比较中进行强制类型转换，===不允许。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;NaN 不等于NaN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;+0 等于-0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript Notes 你不知道的JavaScript中卷" scheme="http://yoursite.com/tags/JavaScript-Notes-%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript%E4%B8%AD%E5%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>Babel 7.5新特性之动态引入和F#管道</title>
    <link href="http://yoursite.com/2019/08/26/Babel7.5%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8A%A8%E6%80%81%E5%BC%95%E5%85%A5%E5%92%8CF%E7%AE%A1%E9%81%93/"/>
    <id>http://yoursite.com/2019/08/26/Babel7.5新特性之动态引入和F管道/</id>
    <published>2019-08-26T15:19:00.000Z</published>
    <updated>2019-10-21T14:03:07.688Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-16b74fc4346ad169.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Babel&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、目录&quot;&gt;&lt;a href=&quot;#一、目录&quot; class=&quot;headerlink&quot; title=&quot;一、目录&quot;&gt;&lt;/a&gt;一、目录&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;F#管道操作符&lt;/li&gt;
&lt;li&gt;动态导入&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;二、F-管道操作符&quot;&gt;&lt;a href=&quot;#二、F-管道操作符&quot; class=&quot;headerlink&quot; title=&quot;二、F#管道操作符&quot;&gt;&lt;/a&gt;二、F#管道操作符&lt;/h1&gt;&lt;p&gt;管道操作符提议还在第一阶段的开发中，同时也意味着其规范还在定义中。Babel 从&lt;code&gt;7.3.0&lt;/code&gt; 版本已经支持了管道的变形&lt;code&gt;Smart&lt;/code&gt;，以及&lt;code&gt;7.0.0-beta&lt;/code&gt;版本以来的&lt;code&gt;minimal&lt;/code&gt;变形，并且现在又有了新的&lt;code&gt;F#&lt;/code&gt;变形。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;F#&lt;/code&gt;的变形不同于已经存在的&lt;code&gt;smart&lt;/code&gt;变形，为何呢?与之前的话题引用（&lt;code&gt;topic references&lt;/code&gt;）的概念相比，我们将使用箭头函数来代替。最明显的一个优势就是其更像当今的JavaScript ，并且有着更简洁的语法。换而言之，管道操作符是用在单个参数函数调用时非常有用的且必不可少的语法糖。&lt;br&gt;也就意味着：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqrt(64)

// 等于

64 |&amp;gt; sqrt&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上语法的好处就是当链接多个函数的时候可以使代码更具可读性，这就是管道操作符的最明显的作用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript Babel" scheme="http://yoursite.com/tags/JavaScript-Babel/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JS中的事件发射器（Event Emitters）</title>
    <link href="http://yoursite.com/2019/08/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JS%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%8F%91%E5%B0%84%E5%99%A8/"/>
    <id>http://yoursite.com/2019/08/22/深入理解JS中的事件发射器/</id>
    <published>2019-08-22T12:23:00.000Z</published>
    <updated>2019-10-23T14:40:22.444Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-84f3e55abfbaba7a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Event Emitter&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;先看一个&lt;code&gt;DOM&lt;/code&gt;事件:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const button = document.querySelector(&amp;quot;button&amp;quot;);

button.addEventListener(&amp;quot;click&amp;quot;, (event) =&amp;gt; /* do something with the event */)&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上代码在&lt;code&gt;button&lt;/code&gt;上添加了一个事件监听器，每当点击&lt;code&gt;button&lt;/code&gt;的时候，点击事件被触发出去并且同时调用&lt;code&gt;callback&lt;/code&gt;函数。&lt;/p&gt;
&lt;p&gt;有很多时候可能会有需要触发自定义事件的需求，不单单只是一个点击事件，假设有这样一个需要触发一个基于其他触发器的事件，并且需要有一个事件响应的，可以自定义一个&lt;code&gt;event emitter&lt;/code&gt;来实现。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript Event Emitters" scheme="http://yoursite.com/tags/JavaScript-Event-Emitters/"/>
    
  </entry>
  
  <entry>
    <title>ES2019 新特性</title>
    <link href="http://yoursite.com/2019/08/19/ES2019%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>http://yoursite.com/2019/08/19/ES2019新特性/</id>
    <published>2019-08-19T14:06:00.000Z</published>
    <updated>2019-10-21T14:03:43.127Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-69db7d2ed973e3ae.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ES2019&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Object-fromEntries&quot;&gt;&lt;a href=&quot;#Object-fromEntries&quot; class=&quot;headerlink&quot; title=&quot;Object.fromEntries&quot;&gt;&lt;/a&gt;Object.fromEntries&lt;/h1&gt;&lt;p&gt;在ES2017中，引入了&lt;code&gt;Object.entries&lt;/code&gt;来把&lt;code&gt;Object&lt;/code&gt;转成数组，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;let students = {
  amelia: 20,
  beatrice: 22,
  cece: 20,
  deirdre: 19,
  eloise: 21
}

Object.entries(students) 
// [
//  [ &amp;apos;amelia&amp;apos;, 20 ],
//  [ &amp;apos;beatrice&amp;apos;, 22 ],
//  [ &amp;apos;cece&amp;apos;, 20 ],
//  [ &amp;apos;deirdre&amp;apos;, 19 ],
//  [ &amp;apos;eloise&amp;apos;, 21 ]
// ]&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="JavaScript ES2019" scheme="http://yoursite.com/categories/JavaScript-ES2019/"/>
    
    
      <category term="ES2019 JavaScript" scheme="http://yoursite.com/tags/ES2019-JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES6之Set和Map及WeakSet和WeakMap总结</title>
    <link href="http://yoursite.com/2019/08/19/ES6%E4%B9%8BSet%E5%92%8CMap%E5%8F%8AWeakSet%E5%92%8CWeakMap%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/19/ES6之Set和Map及WeakSet和WeakMap总结/</id>
    <published>2019-08-19T12:44:00.000Z</published>
    <updated>2019-10-21T14:03:26.712Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-96533cae7400a3a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Set &amp;amp; Map&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;一、Set&quot;&gt;&lt;a href=&quot;#一、Set&quot; class=&quot;headerlink&quot; title=&quot;一、Set&quot;&gt;&lt;/a&gt;一、Set&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;概念&lt;br&gt;&lt;code&gt;Set&lt;/code&gt;类似于数组，本身是一个构造函数，用来生成 &lt;code&gt;Set&lt;/code&gt; 数据结构，成员值都是唯一的，常用于数组去重。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;属性&lt;br&gt;&lt;code&gt;Set.prototype.size&lt;/code&gt;：返回Set实例的成员总数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方法&lt;br&gt;&lt;code&gt;add()&lt;/code&gt; 添加值，返回 Set 结构本身。&lt;br&gt;&lt;code&gt;delete()&lt;/code&gt; 删除值，返回一个布尔值，表示删除是否成功。&lt;br&gt;&lt;code&gt;has()&lt;/code&gt; 返回一个布尔值，表示该值是否为&lt;code&gt;Set&lt;/code&gt;的成员。&lt;br&gt;&lt;code&gt;clear()&lt;/code&gt; 清除所有成员，没有返回值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历&lt;br&gt;&lt;code&gt;Set.prototype.keys()&lt;/code&gt;：返回键名的遍历器&lt;br&gt;&lt;code&gt;Set.prototype.values()&lt;/code&gt;：返回键值的遍历器&lt;br&gt;&lt;code&gt;Set.prototype.entries()&lt;/code&gt;：返回键值对的遍历器&lt;br&gt;&lt;code&gt;Set.prototype.forEach()&lt;/code&gt;：使用回调函数遍历每个成员&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JavaScript ES6" scheme="http://yoursite.com/categories/JavaScript-ES6/"/>
    
    
      <category term="ES6 Set Map WeakSet WeakMap" scheme="http://yoursite.com/tags/ES6-Set-Map-WeakSet-WeakMap/"/>
    
  </entry>
  
  <entry>
    <title>深入理解JavaScript中的Web Worker</title>
    <link href="http://yoursite.com/2019/08/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JavaScript%E4%B8%AD%E7%9A%84WebWorker/"/>
    <id>http://yoursite.com/2019/08/04/深入理解JavaScript中的WebWorker/</id>
    <published>2019-08-04T09:07:00.000Z</published>
    <updated>2019-11-01T14:40:06.718Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、背景&quot;&gt;&lt;a href=&quot;#一、背景&quot; class=&quot;headerlink&quot; title=&quot;一、背景&quot;&gt;&lt;/a&gt;一、背景&lt;/h1&gt;&lt;p&gt;由于JavaScript是单线程模型，即所有任务只能在同一个线程上面完成，前面的任务没有做完，后面的就只能等待，这对于日益增强的计算能力来说不是一件好事。所以在HTML5中引入了Web Worker的概念，来为JavaScript创建多线程环境，将其中一些任务分配给Web Worker运行，二者可以同时运行，互不干扰，如图：&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-d566f191add913c3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;With or without worker&quot;&gt;&lt;/p&gt;
&lt;p&gt;Web Worker是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，引入Web Worker的好处是一些计算密集型或高延迟的任务，被 Web Worker 线程所处理，主线程就会很流畅，不会被阻塞或拖慢，而此时 Web Worker 在后台运行。但是这也正是 Web Worker 比较耗费资源的原因，不应该过度使用，而且一旦使用完毕，就应该关闭。&lt;/p&gt;
&lt;h1 id=&quot;二、浏览器支持&quot;&gt;&lt;a href=&quot;#二、浏览器支持&quot; class=&quot;headerlink&quot; title=&quot;二、浏览器支持&quot;&gt;&lt;/a&gt;二、浏览器支持&lt;/h1&gt;&lt;p&gt;所有主流浏览器均支持 Worker，除了 Internet Explorer。&lt;br&gt;可以使用如下代码检测 Worker 支持&lt;br&gt;在创建 Worker 之前，请检测用户的浏览器是否支持它：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if(typeof(Worker)!==&amp;quot;undefined&amp;quot;)
  {
  // Yes! Web worker support!
  // Some code.....
  }
else
  {
  // Sorry! No Web Worker support..
  }&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript Web Worker" scheme="http://yoursite.com/tags/JavaScript-Web-Worker/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Javascript中的Prototype原型</title>
    <link href="http://yoursite.com/2019/07/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Javascript%E4%B8%AD%E7%9A%84Prototype%E5%8E%9F%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/07/17/深入理解Javascript中的Prototype原型/</id>
    <published>2019-07-17T14:25:00.000Z</published>
    <updated>2019-10-28T13:55:54.317Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;刚开始学Javascript的时候觉得很简单，其中的东西也就是那是基本的，但是还是太年轻，最近因为面试中常被问到关于原型和原型链的问题，然后自己也是模棱两可的，含含糊糊说不清楚，所以痛下思定，决定好好下一番功夫来搞懂吃透原型与原型链究竟是什么。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;关于new&quot;&gt;&lt;a href=&quot;#关于new&quot; class=&quot;headerlink&quot; title=&quot;关于new&quot;&gt;&lt;/a&gt;关于&lt;code&gt;new&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;&lt;code&gt;new&lt;/code&gt;的过程&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新生成了一个对象&lt;/li&gt;
&lt;li&gt;链接到原型&lt;/li&gt;
&lt;li&gt;绑定 this&lt;/li&gt;
&lt;li&gt;返回新对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;知道了&lt;code&gt;new&lt;/code&gt;的原理后，也可以自己实现一个&lt;code&gt;new&lt;/code&gt;函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function myNew() {
    // 创建一个空的对象
    let obj = new Object()
    // 获得构造函数
    let Con = [].shift.call(arguments)
    // 链接到原型
    obj.__proto__ = Con.prototype
    // 绑定 this，执行构造函数
    let result = Con.apply(obj, arguments)
    // 确保 new 出来的是个对象
    return typeof result === &amp;apos;object&amp;apos; ? result : obj
}&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript Prototype" scheme="http://yoursite.com/tags/JavaScript-Prototype/"/>
    
  </entry>
  
  <entry>
    <title>JS实现JQuery中的链式操作具体实现</title>
    <link href="http://yoursite.com/2019/07/15/JS%E5%AE%9E%E7%8E%B0JQuery%E4%B8%AD%E7%9A%84%E9%93%BE%E5%BC%8F%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/07/15/JS实现JQuery中的链式操作/</id>
    <published>2019-07-15T14:41:00.000Z</published>
    <updated>2019-11-05T13:57:14.621Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;p&gt;前不久面试某大厂被问到关于JQuery中的链式操作的问题，才疏学浅的我一脸懵逼，这东西只是用过，怎么还要求自己动手实现呢，究其原因还是自己修为不够，达不到大厂的水平，平时“拿来主义”习惯了，也不会去深究其底层原理，可见学习思维与方式还需改进，今天就来好好学
        
      
    
    </summary>
    
    
      <category term="JavaScript JQuery" scheme="http://yoursite.com/categories/JavaScript-JQuery/"/>
    
    
      <category term="JavaScript JQuery" scheme="http://yoursite.com/tags/JavaScript-JQuery/"/>
    
  </entry>
  
  <entry>
    <title>ES6 Proxy用法详解</title>
    <link href="http://yoursite.com/2019/07/11/ES6Proxy%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/07/11/ES6Proxy用法详解/</id>
    <published>2019-07-11T14:02:00.000Z</published>
    <updated>2019-10-24T14:27:10.511Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/1741029-96fbd7ec39c2fcb4.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Proxy&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前不久换工作的时候面试某大厂被问到关于Proxy的问题，脑子里有点印象但是又说不出具体使用方法，主要还是自己平时积累不够，所以赶紧来恶补一下。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Metaprogramming&quot;&gt;&lt;a href=&quot;#Metaprogramming&quot; class=&quot;headerlink&quot; title=&quot;Metaprogramming&quot;&gt;&lt;/a&gt;Metaprogramming&lt;/h1&gt;&lt;p&gt;正式开始之前，先一起来理解下什么是Metaprogramming（元编程），因为Proxy就是一种基于Metaprogramming概念的对象 ，维基百科上这样解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;翻译过来就是&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;元编程就是可以使用其他程序来作为输入数据的一种编程技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Proxy&quot;&gt;&lt;a href=&quot;#Proxy&quot; class=&quot;headerlink&quot; title=&quot;Proxy&quot;&gt;&lt;/a&gt;Proxy&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Proxy wraps objects and intercepts their behavior through traps&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The Proxy object is used to define custom behavior for fundamental operations (e.g. property lookup, assignment, enumeration, function invocation, etc).&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JavaScript ES6" scheme="http://yoursite.com/categories/JavaScript-ES6/"/>
    
    
      <category term="ES6 Proxy" scheme="http://yoursite.com/tags/ES6-Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建个人博客部署于Github与Coding</title>
    <link href="http://yoursite.com/2016/08/14/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E4%BA%8EGithub%E4%B8%8ECoding/"/>
    <id>http://yoursite.com/2016/08/14/Hexo搭建个人博客部署于Github与Coding/</id>
    <published>2016-08-14T08:07:00.000Z</published>
    <updated>2019-10-21T14:04:02.104Z</updated>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;早就听说可以自己弄一个博客然后免费部署到github上面，但是一直没机会着手去做，前几天，机缘巧合之下，发现了&lt;a href=&quot;https://www.npmjs.com/package/hexo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;这个好东西，这才发现原来它就是我苦苦找寻的的东西啊。真是“&lt;strong&gt;踏破铁鞋无觅处，得来全不费功夫。&lt;/strong&gt;”啊。&lt;/li&gt;
&lt;li&gt;那好，lz要开始搭建个人博客啦（入坑了）。期间各种坑只能自己体会，虽然外面已经很多搭建的教程了，但是我也来凑个热闹，其实也算是记录一下自己学习的过程，还有期间所遇的各种坑以至于不得不中断到改日再战的坑，在次记录一下让后面的小伙伴们更方便一些，不至于那么惨。&lt;/li&gt;
&lt;li&gt;首先必须&lt;strong&gt;安装一下&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git&lt;/a&gt; for windows&lt;/strong&gt;,然后申请个&lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;账号啊，建议日后想从事CS相关的童鞋多上上全球最大的同性交友网站（GitHub），里面的好东西真不少，受益匪浅啊。&lt;/li&gt;
&lt;li&gt;Git不会的童鞋网上搜一下，很简单，在此附上一张命令速查表，方便快捷，虽然貌似后面都没用到git命令。&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1741029-4f7a27cef1b46665.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1741029-e5035d2c74ba60c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Git命令&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="Hexo Blog" scheme="http://yoursite.com/tags/Hexo-Blog/"/>
    
  </entry>
  
</feed>
